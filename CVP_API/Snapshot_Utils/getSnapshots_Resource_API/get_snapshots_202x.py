#!/usr/bin/env python3
#
# Copyright (c) 2021, Arista Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#  - Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#  - Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#  - Neither the name of Arista Networks nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
# THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Locate last Snapshot with user provided name for CVP 2020.1.x and above
# Snapshots with a show tech-support command in them will produce two reports
# one report for the show tech-support and one for the rest of the show commands
#
#    Version 0.1 20/01/2020
#
#    Written by:
#       Hugh Adams, Arista Networks
#
#    Revision history:
#       0.1 - 20/01/2020 - initial script
#
# Requires a user with read access to the CVP aeris database
#
# Requires:
#      --server    CloudVision server url or IP address
#      --user      CloudVision User Name
#      --passwd    User's Password
#
# Optional:
#      --device    Switch / Router Hostname or partial name to filter output
#      --snapshot  Snapshot Name as it apears in CVP or partial name
#
# Additional Options:
#      token=None  location of the token file generated by get_token.py
#      certs=None, location of file containing CVP certificates
#      ca=None,    location of ca file from CVP
#      key=None    location of key file from CVP
#
#  These files are assumed to be in the same location as this file unless
#  the above options are amended
#
#  utils.py (pretty_print import) can be found in cloudvision-python repo
#  https://github.com/aristanetworks/cloudvision-python/blob/trunk/examples/Connector/utils.py
#


# Import Required Libraries
import json
import requests
import ssl
import os, sys
from cloudvision.Connector.grpc_client import GRPCClient, create_query
from cloudvision.Connector.codec.custom_types import FrozenDict
from utils import pretty_print
from utils import fileWrite
import argparse

debug = False

def login(url_prefix, username, password, supported_api=True):
    connect_timeout = 10
    headers = {"Accept": "application/json", "Content-Type": "application/json"}
    session = requests.Session()
    authdata = {"userId": username, "password": password}
    response = session.post(
        "https://" + url_prefix + "/web/login/authenticate.do",
        data=json.dumps(authdata),
        headers=headers,
        timeout=connect_timeout,
        verify=False,
    )
    if response.json()["sessionId"]:
        token = response.json()["sessionId"]
        if supported_api:
            #sslcert = ssl.get_server_certificate((url_prefix, 8443))
            sslcert = ssl.get_server_certificate((url_prefix, 443))
        else:
            sslcert = ssl.get_server_certificate((url_prefix, 9900))
        print (f"Logged into {url_prefix}")
        return [token, sslcert]


def get_client(apiserverAddr, token=None, certs=None, key=None, ca=None):
    ''' Returns the gRPC client used for authentication'''
    return GRPCClient(apiserverAddr, token=token, key=key, ca=ca, certs=certs)


def get(client, dataset, pathElts, resType = "gd"):
    ''' Returns a query on a path element
    resType can be gd - generator dict
                   gl - generator list
                   nd  - dict
                   nl  - list'''
    if "d" in resType.lower():
        result = {}
    else:
        result = []
    query = [
        create_query([(pathElts, [])], dataset)
    ]
    for batch in client.get(query):
        for notif in batch["notifications"]:
            if debug:
                pretty_print(notif["updates"])
            if "d" in resType.lower():
                result.update(notif["updates"])
            elif "l"in resType.lower():
                result.append(notif["updates"])
            else:
                return (f"Unknown resType: {resType}")
    if "g" in resType.lower():
        yield result
    elif "n" in resType.lower():
        return result
    else:
        return (f"Unknown resType: {resType}")

def query_devices(client):
    ''' query client for List of Devices
    return Hostnames and serial numbers
    {
        hostname - str,
        serial - str
    }'''
    pathElts = [
        "DatasetInfo",
        "Devices",
    ]
    dataset = "analytics"
    for devices in get(client, dataset, pathElts):
        if debug:
            print(f"device-data: {devices}\n\n")
        for device, data in devices.items():
            yield {
                    "hostname": data["hostname"],
                    "serial": device,
                }

def query_snapshots(client):
    ''' query client for List of Snapshots 
    return Snapshot IDs and Details
    {
        snapshot_id - str,
        Name -str,
        Frequency - timestamp,
        DeviceList - list,
        CommandList list,
        DeviceTagList - list,
        LastUpdateBy - str,
        note - str,
        Status -str
    }'''
    snapshotElts = [
        "snapshots",
        "config"
    ]
    dataset = "cvp"
    for snapshots in get(client, dataset, snapshotElts):
        result = {}
        for snapshot in snapshots:
            if debug:
                print(f"snapshot-data: {snapshot}\n\n")
            result['snapshot_id'] = snapshot
            resultElts = [
                "snapshots", 
                "config", 
                snapshot 
                ]
            for configs in get(client, dataset, resultElts):
                print(f"Reading configs for {snapshot}")
                if configs.get(snapshot):
                    for element in configs[snapshot]:
                        if configs[snapshot].get(element):
                            result[element] = configs[snapshot][element]
                        else:
                            print(f"{snapshot} doesn't contain element {element}. Not adding to results.")
                    result['note'] = configs['note']
                    result['status']= configs['status']
                else:
                    print(f"Configuration doesn't contain a {snapshot} key. Configuration:\n{configs}")
            yield result

def query_ssResults(client, device_id, ss_id):
    ''' query client for the results of a Snapshot
    Snapshot specific to device ID
    return Snapshot Commands and Resulting Outputs
    {
        snapshot_id - str,
        {
            command -str,
            error - str
            result -str
        }
    }'''
    snapshotElts = [
        "snapshots",
        "status",
        device_id,
        "snapshots",
        "ids",
        ss_id
    ]
    dataset = "cvp"
    result = {}
    for results in unfreeze(get(client, dataset, snapshotElts)):
        if debug:
            print (f"Snap shot Results Data type {type(results)}")
            print(f"ssResults-results: {results}\n\n")
        if ss_id in results:
            for commandLine in results[ss_id]['Output']:
                result[commandLine['Command']] = {}
                result[commandLine['Command']]['error'] = commandLine['Error']
                result[commandLine['Command']]['output'] = ""
                foundElement = True
                elementNum = 0
                while foundElement:
                    result[commandLine['Command']]['output'] += results[str(commandLine['Result'])+"_"+str(elementNum)]
                    elementNum += 1
                    if str(commandLine['Result'])+"_"+str(elementNum) not in results:
                        foundElement = False
                
    return result

def unfreeze(o):
    ''' Used to unfreeze Frozen dictionaries'''
    if isinstance(o, (dict, FrozenDict)):
        return dict({k: unfreeze(v) for k, v in o.items()})
    if isinstance(o, (str)):
        return o
    try:
        return [unfreeze(i) for i in o]
    except TypeError:
        pass
    return o


def main(server, cvp_user, cvp_pass, device='ALL', ss_name='all', token=None, certs=None, ca=None, key=None, supported_api=True):
    print ("\n\n###########  START  ########## \n")
    fullPath = str(os.path.abspath(os.path.dirname(sys.argv[0])))+"/snapshots/"
    print(f"Files will be saved to: {fullPath}\n")
    if supported_api:
        #print("Using supported API on port 8443")
        print("Using supported API on port 443")
        if not token:
            token = "token.txt"
        if not ca:
            ca = "cvp.crt"

        creds = login(server, cvp_user, cvp_pass)
        
        with open(token,"w") as f:
            f.write(creds[0])
        with open(ca, "w") as f:
            f.write(creds[1])
        #client = get_client(f"{server}:8443", token=token, key=key, ca=ca, certs=certs)
        client = get_client(f"{server}:443", token=token, key=key, ca=ca, certs=certs)
    else:
        print("Using unsupported API on port 9900")
        if not ca:
            ca = "ca.crt"
        if not certs:
            certs = "aerisadmin.crt"
        if not key:
            key = "aerisadmin.key"

        creds = login(server, cvp_user, cvp_pass, supported_api)
        client = get_client(f"{server}:9900",token=token, key=key, ca=ca, certs=certs)

    device_list = {}
    
    print("\n######  Gather Device Info  #####\n")
    if query_devices(client):
        print("   Devices Found:")
        for dev_item in query_devices(client):
            if device in dev_item['hostname'].upper() or device == 'ALL':
                print(f"      {dev_item['hostname']}")
                device_list[dev_item['serial']]={}
                device_list[dev_item['serial']]['hostname']=dev_item['hostname']
                device_list[dev_item['serial']]['snapshot']={}    
    
        print("\n#####  Gather Snapshot IDs and associate it with Devices  #####")
        if query_snapshots(client):
            for ss_item in query_snapshots(client):
                # Only add required Snapshots to devices
                if ss_item.get('Name') or ss_name == 'all':
                    ss_item_name = ss_item.get('Name')
                    if ss_item_name:
                        ss_item_name = ss_item_name.lower()
                    else:
                        ss_item_name = ''
                    if ss_name in ss_item_name or ss_name == 'all':
                        print(f"\n   Snapshot: {ss_name}")
                        if ss_item.get('CommandList'):
                            for command in ss_item['CommandList']:
                                print(f"      {command}")
                        else:
                            print(f"      No commands found")
                        if ss_item.get('DeviceList'):
                            if len(ss_item['DeviceList']) > 0:
                                for ss_device in ss_item['DeviceList']:
                                    if ss_device in device_list:
                                        if ss_item['snapshot_id'] not in device_list[ss_device]['snapshot']:
                                            device_list[ss_device]['snapshot'][ss_item['snapshot_id']] = {}
                                            device_list[ss_device]['snapshot'][ss_item['snapshot_id']]['name']=ss_item['Name']
                                            device_list[ss_device]['snapshot'][ss_item['snapshot_id']]['type']="scheduled"
                            else:
                                for device in device_list:
                                    device_list[device]['snapshot'][ss_item['snapshot_id']] = {}
                                    device_list[device]['snapshot'][ss_item['snapshot_id']]['name'] = ss_item['Name']
                                    device_list[device]['snapshot'][ss_item['snapshot_id']]['type'] = "ad_hoc"
                        else:
                            print(f"      No devices found in snapshot")
                else:
                    print("   No snapshot names found!")
        else:
            print("   No snapshot IDs found!")
        
        print("\n#####  Collect Snapshot Results for each Device  #####\n")
        for device_id in device_list:
            cleanup_list = []
            for ss_id in device_list[device_id]['snapshot']:
                snapshot_output = query_ssResults(client, device_id, ss_id)
                if debug:
                    print(f"Snapshot Results for {device_list[device_id]['hostname']} - {device_list[device_id]['snapshot'][ss_id]['name']}\
                        \n{snapshot_output}\n")
                # Update Snapshot data for Snapshots with results
                if len(snapshot_output) > 0:
                    print(f"{device_list[device_id]['hostname']} - {device_list[device_id]['snapshot'][ss_id]['name']} Updated ")
                    device_list[device_id]['snapshot'][ss_id].update(snapshot_output)
                # Add empty Snapshot / ss_id to cleanup list
                else:
                    cleanup_list.append(ss_id)
            # Clean up empty Snapshot entries on device
            for remove_ss_id in cleanup_list:
                print(f"{device_list[device_id]['hostname']} - {device_list[device_id]['snapshot'][remove_ss_id]['name']} Removed ")
                del device_list[device_id]['snapshot'][remove_ss_id]

        print("\n##########  Device List  ###########")
        for device in device_list:
            report_name = str(fullPath)+str(device_list[device]['hostname'])+"_Snapshots.txt"
            showTec = str(fullPath)+str(device_list[device]['hostname'])+"_showTec.txt"
            showJSON = str(fullPath)+str(device_list[device]['hostname'])+"_showTec.json"
            saveJSON = False
            if len(device_list[device]['snapshot']) > 0:
                print(f"\n   Device Name:{device_list[device]['hostname']} - {device}\n      Snapshots:")
                for snapshot in device_list[device]['snapshot']:
                    print(f"         {device_list[device]['snapshot'][snapshot]['name']}")
                    if debug:
                        print(f"Snapshot-data: {device_list[device]['snapshot'][snapshot]}")
                print(
                    f"\n   Creating Snapshot Report for {device_list[device]['hostname']}\n")
                # Create Text Report from Snapshot
                deviceReport = "Snapshot Text Report for %s\n" %str(device_list[device]['hostname'])
                deviceJSON = {"report":"Snapshot JSON Report for %s" %str(device_list[device]['hostname'])}
                for snapshot_id in device_list[device]['snapshot']:
                    for commandEntry in device_list[device]['snapshot'][snapshot_id]:
                        if 'show' in commandEntry:
                            if device_list[device]['snapshot'][snapshot_id][commandEntry]['error'] == "":
                                response = device_list[device]['snapshot'][snapshot_id][commandEntry]['output']
                            else:
                                response = device_list[device]['snapshot'][snapshot_id][commandEntry]['error']
                            if debug:
                                print(f"    Looking at command: {commandEntry}")
                            if 'show tech' in commandEntry:
                                saveTech = fileWrite(showTec, response, "txt", "w")
                                if saveTech:
                                    print(f"    Show Tech report saved to: {showTec}")
                            elif '| json' in commandEntry:
                                saveJSON = True
                                deviceJSON[str(commandEntry)]= json.loads(str(response))
                            else:
                                deviceReport += "\n%s\n" % str(commandEntry)
                                deviceReport += str(response)
                                deviceReport += "\n          ####################\n"

                saveReport = fileWrite(report_name, deviceReport, "txt", "w")
                if saveReport:
                    print (f"    Audit Text report saved to: {report_name}")
                if saveJSON:
                    saveJSONreport = fileWrite(showJSON, deviceJSON, "json", "w")
                    if saveJSONreport:
                        print (f"    Audit JSON report saved to: {showJSON}")
    else:
        print("   No Devices Found!")

    print("\n##########  END  ##########")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--server',required=True, type=str, help='CloudVision server, e.g 10.83.12.79')
    parser.add_argument('--device',required=False,type=str,help='device Name',default='all')
    parser.add_argument('--user', required=True, type=str, help='CloudVision User Name')
    parser.add_argument('--passwd', required=True,type=str, help="User's Password")
    parser.add_argument('--snapshot', required=False, type=str, help="Snapshot Name as it apears in CVP",default='all')
    parser.add_argument('-u', required=False, action="store_false", help="Use unsupported Resource API")
    args = parser.parse_args()
    server = args.server
    deviceId = args.device.upper()
    ss_name = args.snapshot.lower()
    cvp_user = args.user
    cvp_pass = args.passwd
    main(server,cvp_user,cvp_pass,deviceId,ss_name,supported_api=args.u)
